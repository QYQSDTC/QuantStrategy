#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Âü∫‰∫éqstockÁöÑÂÆûÊó∂ÈÄâËÇ°ËÑöÊú¨
Âà©Áî®qstockÁöÑÂÆûÊó∂Êï∞ÊçÆËøõË°åÂçÅÂ≠óÊòüÂèçËΩ¨Á≠ñÁï•ÈÄâËÇ°

Áî±‰∫éqstock‰∏ªË¶ÅÊèê‰æõÂÆûÊó∂Êï∞ÊçÆÔºåÊú¨ËÑöÊú¨‰∏ìÊ≥®‰∫éÔºö
1. ÂÆûÊó∂Êï∞ÊçÆËé∑ÂèñÂíåÂàÜÊûê
2. ÂΩìÊó•Â∏ÇÂú∫ÊÉÖÁª™Âà§Êñ≠
3. ÂÆûÊó∂ÈÄâËÇ°Á≠õÈÄâ
4. Áõò‰∏≠ÁõëÊéßÂäüËÉΩ
"""

import pandas as pd
import qstock as qs
import numpy as np
from datetime import datetime, timedelta
import time
import warnings

warnings.filterwarnings("ignore")

print("üöÄ qstockÂÆûÊó∂ÈÄâËÇ°Á≥ªÁªü - ÂçÅÂ≠óÊòüÂèçËΩ¨Á≠ñÁï•")
print("=" * 60)


class QstockRealtimeScreener:
    def __init__(self):
        self.stock_name_map = {}
        self.market_sentiment = {
            "date": None,
            "hot_stocks": [],
            "sentiment_active": False,
            "total_stocks": 0,
            "up_stocks": 0,
            "down_stocks": 0,
            "limit_up": 0,
            "limit_down": 0,
        }

    def get_stock_list(self):
        """Ëé∑ÂèñËÇ°Á•®ÂàóË°®"""
        print("üìä Ê≠£Âú®Ëé∑ÂèñÂÆûÊó∂ËÇ°Á•®Êï∞ÊçÆ...")
        
        try:
            # ‰ΩøÁî®qstockËé∑ÂèñÊ≤™Ê∑±AËÇ°ÂÆûÊó∂Êï∞ÊçÆ
            all_stocks = qs.realtime_data()
            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(all_stocks)} Âè™ËÇ°Á•®ÁöÑÂÆûÊó∂Êï∞ÊçÆ")
            
            # ÈÄÇÈÖçÂàóÂêç
            if "‰ª£Á†Å" in all_stocks.columns:
                code_col, name_col = "‰ª£Á†Å", "ÂêçÁß∞"
            elif "code" in all_stocks.columns:
                code_col, name_col = "code", "name"
            else:
                code_col, name_col = all_stocks.columns[0], all_stocks.columns[1]
            
            # Á≠õÈÄâ‰∏ªÊùøËÇ°Á•®
            def is_main_board_stock(code, name):
                # ÊéíÈô§Âàõ‰∏öÊùøÂíåÁßëÂàõÊùø
                if any(code.startswith(prefix) for prefix in ["300", "688"]):
                    return False
                # ÊéíÈô§STËÇ°Á•®ÂíåÈÄÄÂ∏ÇËÇ°Á•®
                if any(keyword in name for keyword in ["ST", "st", "ÈÄÄ"]):
                    return False
                # ‰∏ªÊùøËÇ°Á•®‰ª£Á†Å
                main_board_prefixes = ["600", "601", "603", "605", "000", "001", "002"]
                return any(code.startswith(prefix) for prefix in main_board_prefixes)

            main_board_stocks = all_stocks[
                all_stocks.apply(
                    lambda row: is_main_board_stock(row[code_col], row[name_col]), axis=1
                )
            ]

            # ÂàõÂª∫ËÇ°Á•®‰ª£Á†ÅÂà∞ÂêçÁß∞ÁöÑÊò†Â∞Ñ
            for _, row in main_board_stocks.iterrows():
                self.stock_name_map[row[code_col]] = row[name_col]

            print(f"üìà Á≠õÈÄâÂá∫ {len(main_board_stocks)} Âè™‰∏ªÊùøËÇ°Á•®")
            return main_board_stocks, code_col, name_col
            
        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñËÇ°Á•®Êï∞ÊçÆÂ§±Ë¥•: {e}")
            return None, None, None

    def analyze_market_sentiment(self, stocks_data, code_col):
        """ÂàÜÊûêÂ∏ÇÂú∫ÊÉÖÁª™"""
        print("\nüîç Ê≠£Âú®ÂàÜÊûêÂ∏ÇÂú∫ÊÉÖÁª™...")
        
        try:
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            # ÈÄÇÈÖçÊ∂®Ë∑åÂπÖÂàóÂêç
            pct_col = None
            for col in ["Ê∂®Ë∑åÂπÖ", "pct_change", "change_pct", "Ê∂®ÂπÖ"]:
                if col in stocks_data.columns:
                    pct_col = col
                    break
            
            if pct_col is None:
                print("‚ö†Ô∏è  Êú™ÊâæÂà∞Ê∂®Ë∑åÂπÖÊï∞ÊçÆÂàóÔºåË∑≥ËøáÊÉÖÁª™ÂàÜÊûê")
                return False
            
            # Â∏ÇÂú∫ÁªüËÆ°
            total_stocks = len(stocks_data)
            up_stocks = len(stocks_data[stocks_data[pct_col] > 0])
            down_stocks = len(stocks_data[stocks_data[pct_col] < 0])
            limit_up = len(stocks_data[stocks_data[pct_col] >= 9.5])  # Ê∂®ÂÅú
            limit_down = len(stocks_data[stocks_data[pct_col] <= -9.5])  # Ë∑åÂÅú
            
            # Âº∫ÂäøËÇ°Á•®ÔºàÊ∂®ÂπÖË∂ÖËøá6%Ôºâ
            strong_stocks = stocks_data[stocks_data[pct_col] > 6]
            
            # Êõ¥Êñ∞Â∏ÇÂú∫ÊÉÖÁª™Áä∂ÊÄÅ
            self.market_sentiment.update({
                "date": current_date,
                "total_stocks": total_stocks,
                "up_stocks": up_stocks,
                "down_stocks": down_stocks,
                "limit_up": limit_up,
                "limit_down": limit_down,
                "hot_stocks": [],
                "sentiment_active": False,
            })
            
            # ËÆ∞ÂΩïÂº∫ÂäøËÇ°Á•®
            hot_stocks = []
            for _, stock in strong_stocks.iterrows():
                stock_name = self.stock_name_map.get(stock[code_col], stock[code_col])
                hot_stocks.append({
                    "symbol": stock[code_col],
                    "name": stock_name,
                    "gain_today": stock[pct_col],
                })
            
            self.market_sentiment["hot_stocks"] = hot_stocks
            
            # Âà§Êñ≠Â∏ÇÂú∫ÊÉÖÁª™ÊòØÂê¶Ê¥ªË∑É
            up_ratio = up_stocks / total_stocks if total_stocks > 0 else 0
            sentiment_active = (
                up_ratio > 0.6 or  # Ë∂ÖËøá60%ÁöÑËÇ°Á•®‰∏äÊ∂®
                limit_up > 10 or   # Ê∂®ÂÅúËÇ°Á•®Ë∂ÖËøá10Âè™
                len(strong_stocks) > 50  # Âº∫ÂäøËÇ°Á•®Ë∂ÖËøá50Âè™
            )
            
            self.market_sentiment["sentiment_active"] = sentiment_active
            
            # ËæìÂá∫ÊÉÖÁª™ÂàÜÊûêÁªìÊûú
            print(f"üìä Â∏ÇÂú∫ÊÉÖÁª™ÂàÜÊûê ({current_date}):")
            print(f"   ÊÄªËÇ°Á•®Êï∞: {total_stocks}")
            print(f"   ‰∏äÊ∂®ËÇ°Á•®: {up_stocks} ({up_ratio:.1%})")
            print(f"   ‰∏ãË∑åËÇ°Á•®: {down_stocks} ({(down_stocks/total_stocks):.1%})")
            print(f"   Ê∂®ÂÅúËÇ°Á•®: {limit_up}")
            print(f"   Ë∑åÂÅúËÇ°Á•®: {limit_down}")
            print(f"   Âº∫ÂäøËÇ°Á•®: {len(strong_stocks)} (Ê∂®ÂπÖ>6%)")
            
            if sentiment_active:
                print(f"üî• Â∏ÇÂú∫ÊÉÖÁª™: Ê¥ªË∑É ‚úÖ")
                if len(hot_stocks) > 0:
                    print(f"   ÁÉ≠Èó®ËÇ°Á•® (Ââç5Âè™):")
                    for i, stock in enumerate(hot_stocks[:5]):
                        print(f"     {i+1}. {stock['name']}({stock['symbol']}): +{stock['gain_today']:.2f}%")
            else:
                print(f"üò¥ Â∏ÇÂú∫ÊÉÖÁª™: Âπ≥Ê∑° ‚ùå")
            
            return sentiment_active
            
        except Exception as e:
            print(f"‚ùå Â∏ÇÂú∫ÊÉÖÁª™ÂàÜÊûêÂ§±Ë¥•: {e}")
            return False

    def realtime_screening(self):
        """ÂÆûÊó∂ÈÄâËÇ°Á≠õÈÄâ"""
        print("\nüéØ ÂºÄÂßãÂÆûÊó∂ÈÄâËÇ°Á≠õÈÄâ...")
        
        # Ëé∑ÂèñËÇ°Á•®Êï∞ÊçÆ
        stocks_data, code_col, name_col = self.get_stock_list()
        if stocks_data is None:
            return []
        
        # Â∏ÇÂú∫ÊÉÖÁª™ÂàÜÊûê
        sentiment_active = self.analyze_market_sentiment(stocks_data, code_col)
        
        # Âü∫‰∫éÂÆûÊó∂Êï∞ÊçÆÁöÑÁÆÄÂåñÈÄâËÇ°Êù°‰ª∂
        selected_stocks = []
        
        try:
            # ÈÄÇÈÖçÊï∞ÊçÆÂàóÂêç
            price_col = None
            for col in ["ÊúÄÊñ∞‰ª∑", "current_price", "price", "Êî∂Áõò"]:
                if col in stocks_data.columns:
                    price_col = col
                    break
            
            volume_col = None
            for col in ["Êàê‰∫§Èáè", "volume", "vol"]:
                if col in stocks_data.columns:
                    volume_col = col
                    break
            
            pct_col = None
            for col in ["Ê∂®Ë∑åÂπÖ", "pct_change", "change_pct", "Ê∂®ÂπÖ"]:
                if col in stocks_data.columns:
                    pct_col = col
                    break
            
            if not all([price_col, volume_col, pct_col]):
                print("‚ö†Ô∏è  Êï∞ÊçÆÂàó‰∏çÂÆåÊï¥ÔºåÊó†Ê≥ïËøõË°åÈÄâËÇ°")
                return []
            
            print(f"üìà Ê≠£Âú®ÂàÜÊûê {len(stocks_data)} Âè™ËÇ°Á•®...")
            
            # ÁÆÄÂåñÁöÑÂÆûÊó∂ÈÄâËÇ°Êù°‰ª∂
            for _, stock in stocks_data.iterrows():
                try:
                    # Âü∫Êú¨Á≠õÈÄâÊù°‰ª∂
                    price = stock[price_col]
                    volume = stock[volume_col]
                    pct_change = stock[pct_col]
                    
                    # ËøáÊª§Êù°‰ª∂
                    if (
                        price > 5 and  # ‰ª∑Ê†ºÂ§ß‰∫é5ÂÖÉ
                        price < 100 and  # ‰ª∑Ê†ºÂ∞è‰∫é100ÂÖÉ
                        volume > 0 and  # ÊúâÊàê‰∫§Èáè
                        -2 < pct_change < 8  # Ê∂®Ë∑åÂπÖÂú®ÂêàÁêÜËåÉÂõ¥ÂÜÖ
                    ):
                        
                        # ËÆ°ÁÆóÁÆÄÂçïËØÑÂàÜ
                        score = 50  # Âü∫Á°ÄÂàÜ
                        
                        # ‰ª∑Ê†º‰ΩçÁΩÆËØÑÂàÜ
                        if 10 <= price <= 50:
                            score += 10
                        
                        # Ê∂®Ë∑åÂπÖËØÑÂàÜ
                        if 0 < pct_change <= 3:
                            score += 15  # Ê∏©Âíå‰∏äÊ∂®
                        elif 3 < pct_change <= 6:
                            score += 10  # ÈÄÇÂ∫¶‰∏äÊ∂®
                        
                        # Êàê‰∫§ÈáèËØÑÂàÜÔºàÁõ∏ÂØπËØÑÂàÜÔºâ
                        if volume > stocks_data[volume_col].median():
                            score += 10
                        
                        # Âè™ÈÄâÊã©ËØÑÂàÜËæÉÈ´òÁöÑËÇ°Á•®
                        if score > 60:
                            stock_name = self.stock_name_map.get(stock[code_col], stock[code_col])
                            selected_stocks.append({
                                "symbol": stock[code_col],
                                "name": stock_name,
                                "price": price,
                                "pct_change": pct_change,
                                "volume": volume,
                                "score": score,
                            })
                
                except Exception as e:
                    continue
            
            # ÊåâËØÑÂàÜÊéíÂ∫è
            selected_stocks = sorted(selected_stocks, key=lambda x: x["score"], reverse=True)
            
            # ËæìÂá∫ÈÄâËÇ°ÁªìÊûú
            print(f"\nüìã ÂÆûÊó∂ÈÄâËÇ°ÁªìÊûú:")
            if selected_stocks:
                print(f"‚úÖ ÂÖ±ÈÄâÂá∫ {len(selected_stocks)} Âè™ÊΩúÂäõËÇ°Á•®")
                
                if sentiment_active:
                    print("üî• Â∏ÇÂú∫ÊÉÖÁª™Ê¥ªË∑ÉÔºåÂèØËÄÉËôëÊìç‰Ωú")
                else:
                    print("üò¥ Â∏ÇÂú∫ÊÉÖÁª™Âπ≥Ê∑°ÔºåÂª∫ËÆÆËßÇÊúõ")
                
                print(f"\nÂâç10Âè™ËÇ°Á•®:")
                for i, stock in enumerate(selected_stocks[:10]):
                    print(f"  {i+1:2d}. {stock['name']}({stock['symbol']}) - "
                          f"‰ª∑Ê†º:¬•{stock['price']:.2f} "
                          f"Ê∂®ÂπÖ:{stock['pct_change']:+.2f}% "
                          f"ËØÑÂàÜ:{stock['score']}")
            else:
                print("‚ùå Êú™ÂèëÁé∞Á¨¶ÂêàÊù°‰ª∂ÁöÑËÇ°Á•®")
            
            return selected_stocks[:10]  # ËøîÂõûÂâç10Âè™
            
        except Exception as e:
            print(f"‚ùå ÈÄâËÇ°ÂàÜÊûêÂ§±Ë¥•: {e}")
            return []

    def monitor_selected_stocks(self, selected_stocks, monitor_duration=60):
        """ÁõëÊéßÈÄâ‰∏≠ÁöÑËÇ°Á•®"""
        if not selected_stocks:
            print("üì≠ Ê≤°ÊúâËÇ°Á•®ÈúÄË¶ÅÁõëÊéß")
            return
        
        print(f"\nüëÄ ÂºÄÂßãÁõëÊéß {len(selected_stocks)} Âè™ËÇ°Á•® (ÊåÅÁª≠{monitor_duration}Áßí)...")
        
        start_time = time.time()
        monitor_symbols = [stock["symbol"] for stock in selected_stocks]
        
        try:
            while time.time() - start_time < monitor_duration:
                try:
                    # Ëé∑ÂèñÂÆûÊó∂Êï∞ÊçÆ
                    current_data = qs.realtime_data(code=monitor_symbols)
                    
                    if current_data is not None and not current_data.empty:
                        print(f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')} ÂÆûÊó∂ÁõëÊéß:")
                        
                        # ÈÄÇÈÖçÂàóÂêç
                        code_col = "‰ª£Á†Å" if "‰ª£Á†Å" in current_data.columns else current_data.columns[0]
                        
                        for _, stock in current_data.iterrows():
                            symbol = stock[code_col]
                            stock_name = self.stock_name_map.get(symbol, symbol)
                            
                            # Ëé∑Âèñ‰ª∑Ê†ºÂíåÊ∂®Ë∑åÂπÖ‰ø°ÊÅØ
                            try:
                                price = stock.get("ÊúÄÊñ∞‰ª∑", stock.get("current_price", 0))
                                pct_change = stock.get("Ê∂®Ë∑åÂπÖ", stock.get("pct_change", 0))
                                print(f"   {stock_name}({symbol}): ¬•{price:.2f} ({pct_change:+.2f}%)")
                            except:
                                print(f"   {stock_name}({symbol}): Êï∞ÊçÆËé∑ÂèñÂºÇÂ∏∏")
                    
                    time.sleep(10)  # ÊØè10ÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è  ÁõëÊéßÊõ¥Êñ∞Â§±Ë¥•: {e}")
                    time.sleep(5)
                    continue
                    
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  ÁõëÊéßÂ∑≤ÂÅúÊ≠¢")

    def run_full_analysis(self):
        """ËøêË°åÂÆåÊï¥ÁöÑÂÆûÊó∂ÂàÜÊûê"""
        print(f"üïê ÂºÄÂßãÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # 1. ÂÆûÊó∂ÈÄâËÇ°
        selected_stocks = self.realtime_screening()
        
        # 2. ‰øùÂ≠òÈÄâËÇ°ÁªìÊûú
        if selected_stocks:
            df = pd.DataFrame(selected_stocks)
            filename = f"qstock_selected_stocks_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            df.to_csv(filename, index=False, encoding='utf-8-sig')
            print(f"üìÅ ÈÄâËÇ°ÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞: {filename}")
        
        # 3. ËØ¢ÈóÆÊòØÂê¶ÂºÄÂßãÁõëÊéß
        if selected_stocks:
            try:
                monitor = input("\nü§î ÊòØÂê¶ÂºÄÂßãÂÆûÊó∂ÁõëÊéßÈÄâ‰∏≠ÁöÑËÇ°Á•®? (y/n): ").lower().strip()
                if monitor in ['y', 'yes', 'ÊòØ']:
                    duration = input("ÁõëÊéßÊó∂Èïø(ÁßíÔºåÈªòËÆ§60): ").strip()
                    duration = int(duration) if duration.isdigit() else 60
                    self.monitor_selected_stocks(selected_stocks, duration)
            except KeyboardInterrupt:
                print("\nüëã Á®ãÂ∫èÂ∑≤ÈÄÄÂá∫")


def main():
    """‰∏ªÂáΩÊï∞"""
    screener = QstockRealtimeScreener()
    
    try:
        screener.run_full_analysis()
    except KeyboardInterrupt:
        print("\nüëã Á®ãÂ∫èÂ∑≤ÊâãÂä®ÂÅúÊ≠¢")
    except Exception as e:
        print(f"‚ùå Á®ãÂ∫èËøêË°åÂá∫Èîô: {e}")
    
    print(f"üïê ÁªìÊùüÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    print("üí° ‰ΩøÁî®ËØ¥Êòé:")
    print("   - Êú¨ËÑöÊú¨Âü∫‰∫éqstockÂÆûÊó∂Êï∞ÊçÆËøõË°åÈÄâËÇ°")
    print("   - ÈÄÇÂêàÁõò‰∏≠ÂÆûÊó∂ÂàÜÊûêÂíåÁõëÊéß")
    print("   - ‰ΩøÁî®Ctrl+CÂèØÈöèÊó∂ÂÅúÊ≠¢Á®ãÂ∫è")
    print("   - Á°Æ‰øùÂú®‰∫§ÊòìÊó∂Èó¥ÂÜÖËøêË°å‰ª•Ëé∑ÂæóÊúÄ‰Ω≥ÊïàÊûú")
    print("")
    
    main() 